# errmsg - Write an error message to STDERR
#          Set the exit code
#          Exit if fatal error.

declare -i -r EX_OK=0                 # Successful termination
declare -i -r EX_WARNING=4            # Warning
declare -i -r EX_ERROR=8              # Error
declare -i -r EX_SEVERE=12            # Severe error
declare -i -r EX_BASE=64              # Base value for error messages
declare -i -r EX_USAGE=64             # Command line usage error
declare -i -r EX_DATAERR=65           # Data format error
declare -i -r EX_NOINPUT=66           # Cannot open input
declare -i -r EX_NOUSER=67            # Addressee unknown
declare -i -r EX_NOHOST=68            # Host name unknown 
declare -i -r EX_UNAVAILABLE=69       # Service unavailable
declare -i -r EX_SOFTWARE=70          # Internal software error
declare -i -r EX_OSERR=71             # System error (e.g., can't fork)
declare -i -r EX_OSFILE=72            # Critical OS file missing
declare -i -r EX_CANTCREAT=73         # Can't create (user) output file
declare -i -r EX_IOERR=74             # Input/output error
declare -i -r EX_TEMPFAIL=75          # Temp failure; user is invited to retry
declare -i -r EX_PROTOCOL=76          # Remote error in protocol
declare -i -r EX_NOPERM=77            # Permission denied
declare -i -r EX_CONFIG=78            # Configuration error
declare -i -r EX_MISSINGFILE=79       # A file is missing
declare -i -r EX_CANTC8TEMP=80        # Can't create temporary file
declare -i -r EX_ASSERTFAIL=81        # Assertion failed
declare -i -r EX_CANTC8LOCK=82        # Can't create lock file.
declare -i -r EX_USERABORT=83         # Aborted by user
declare -i -r EX_TERMINATION=84       # Trapped termination interrupt
declare -i -r EX_TRAPINT=85           # Trapped interrupt
declare -i -r EX_TESTMAXERR=254       # Maximum error count for Olaus Test
declare -i -r EX_TESTBAIL=255         # BAIL_OUT function terminated script
declare -i    EX_CODE=$EX_OK          # Exit code

function errmsg() {
cat >/dev/null <<'/*'

=head1 NAME

errmsg - Write an error message to STDERR, set the exit code, exit if fatal error.

=head1 SYNOPSIS

errmsg ex_code num msg

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item I<ex_code>

(required) Exit Code and Severity of message. 

=item I<num>

(required) Error message number. 

=item I<msg>

(required) Error message text. 

=back

=head1 SECURITY

=head1 AVAILABILITY

=head1 EXAMPLES

=head1 NOTES

=head1 CAVEATS

=head1 DIAGNOSTICS

=head1 ENVIRONMENT

=over 4

=item EX_CODE

Current exit code.

=item PGMID

5 character Program ID, e.g, RMPXB indicating Ramp extract barstats.

=back

=head1 FILES

=head1 STANDARDS

=head1 VERSION

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

$Revision$

$Id$

2006-09-17 - Function created by nuf ver. 3.0.0

=head1 RESOURCES

=head1 BUGS

=head1 SEE ALSO

=head1 COPYRIGHT

=cut

/*
    if [[ -z "$1" ]]; then
        errmsg $EX_USAGE 2001 "errmsg: missing argument 1, ec"
    else
        local -i ec=$1;
    fi
    if [[ -z "$2" ]]; then
        errmsg $EX_USAGE 2002 "errmsg: missing argument 2, num"
    else
        local num=$(printf "%4u" $2); num=${num// /0}
    fi
    shift 2
    if [[ -z "$1" ]]; then
        errmsg $EX_USAGE 2003 "errmsg: missing argument 3, msg"
    else
        local msg="$*"
    fi

    case $ec in
        ( $EX_OK      ) local sev="I";;
        ( $EX_WARNING ) local sev="W";;
        ( $EX_ERROR   ) local sev="E";;
        ( $EX_SEVERE  ) local sev="S";;
        ( *           ) local sev="F";;
    esac

    echo "$PGMID$num$sev $msg" >&2

    if [[ $ec  -gt $EX_CODE ]]; then EX_CODE=$ec; fi
    if [[ $sev ==  "F"      ]]; then ols_end;     fi

    return 0
} # end errmsg
