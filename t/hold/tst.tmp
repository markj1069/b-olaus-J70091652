#! /usr/env bash

echo at olslib

source $OLS_LIB/olslib
# is - compare two arguments with equal to determine success

function is() {
    
    if [[ $# -eq 0 ]]
    then
        olserr 7000 $EX_SOFTWARE "${FUNCNAME}: Arguments 1-3 missing, got, expected and test_name"
    fi
    if [[ $# -eq 1 ]]
    then
        olserr 7000 $EX_SOFTWARE "${FUNCNAME}: Arguments 2-3, expected and test_name"
    fi
    if [[ $# -eq 2 ]]
    then
        olserr 7000 $EX_SOFTWARE "${FUNCNAME}: Argument 3 missing, test_name"
    fi

    got="$1"
    expected="$2"
    test_name="$3"

    if [[ $# -ge 3 ]]                            # Diagnostic message argument is optional.
    then
        shift 3
        local diagnostic_message="$*"
    else
        local diagnostic_message=""
    fi

    
    # BASH has different equal operators for strings and integers.
    # Figure out which one to use.
    # If both got and expected are integers use "-eq" inside "[["
    # otherwise use "==" inside "[[".
    # Use the Bash extended pattern matching to check for integer.

    if [[ "$got" == ?(-)+([0-9]) ]]
    then
        local ngot=$TRUE
    else
        local ngot=$FALSE
    fi
    if [[ "$expected" == ?(-)+([0-9]) ]]
    then
        local nexpected=$TRUE
    else
        local nexpected=$FALSE
    fi

    # Now that the preliminaries are out of the way,
    # let's do the test.

    if [[ $ngot == $TRUE && $nexpected == $TRUE ]]
    then
        if [[ $got -eq $expected ]]    # Both got and expected are integers
        then                           # use the bash numerial comparison
            printf "%s" "ok"
        else
            printf "%s" "not ok"
        fi
    else
        if [[ "$got" == "$expected" ]]     # Got or expected is a string
        then                               # use the bash string comparison.
            printf "%s" "ok"
        else                    
            printf "%s" "not ok"
        fi
    fi

    tst_no=$(ols_bmp_tstno)             # Increment the TAP Test Number.
    printf "%s" " $tst_no - $test_name"
    if [[ -n "$diagnostic_message" ]]
    then
        printf "%s"  " # $diagnostic_message"
    fi
    printf "\n"
 
    return $EX_OK
} # end is
#! /usr/env/bash

# ols_begin - Olaus BASH Shell Housekeeping Function at Beginning of Script

cat >/dev/null <<'/*'

=head1 NAME

B<ols_begin> - Olaus BASH Shell Housekeeping Function at Beginning of Script

=head1 SYNOPSIS

source $OLS_LIB/ols_begin.sh

=head1 DESCRIPTION

=head1 SUBROUTINES/FUNCTIONS/METHODS

=head1 SECURITY

B<ols_begin> does not need to run as root.

=head1 AVAILABILITY

=head1 EXAMPLES

=head1 NOTES

=head1 CAVEATS

=head1 DIAGNOSTICS

=head1 RETURN STATUS

=over 4

=item EX_OK

=back

=head1 DEPENDENCIES

=head1 INCOMPATABILITIES

=head1 CONFIGURATION AND ENVIRONMENT

=over 4

=item DATE

=item EX_OK

B<errmsg>, 

=item PGMDATE

=item PGMREL

=item YEAR

=back

=head1 FILES

=head1 STANDARDS

=head1 VERSION

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

   Date      Version   Description
2006-09-22  V00.00.00  Function created by nuf ver. 3.0.0
2025-03-10  V00.00.01  Initial Release by Mark

=head1 RESOURCES

=head1 BUGS AND LIMITATIONS

=head1 SEE ALSO

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2006 Mark Jensen. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

=over 4

=item 1.

Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

=item 2.

Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

=back

THIS SOFTWARE IS PROVIDED BY MARK JENSEN ``AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL TEXAS INSTRUMENTS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

=cut

/*

function ols_end() {

    trap '' EXIT                       # No need to trap exit here

    if [[ ! "$OLS_TMP_DIR" || ! -d "$OLS_TMP_DIR" ]]; then
        # Don't try to delete the non existant temporary directory.
        exit $EX_TEMPFAIL
    else
        EX_CODE=$(ols_rd_excode)
        rm -fr "$OLS_TMP_DIR"           # TODO: Delete temporary directory after making
                                        # the command safe from missing OLS_TMP_DIR.
        exit $EX_CODE                   # exit with exit code we have been tracking
    fi

} # end ols_end

function ols_begin() {

# Make some pretty date strings.
declare    -r -x DATE=$(date +'%Y-%m-%d') # Grab today's date
declare    -r -x YEAR=$(date +'%Y')       # We want the year also.

declare    -r -x OLS_TMP_DIR=$(mktemp -d) # Make a directory for temporary files.
# check if tmp dir was created
if [[ ! "$OLS_TMP_DIR" || ! -d "$OLS_TMP_DIR" ]]; then
  printf "OLS1000F Could not create OLS_TMP_DIR temporary directory\n"
  exit $EX_TEMPFAIL
fi

declare    -r -x OLS_TSTFILE="$OLS_TMP_DIR/TAP.txt"      # Hold the current TAP test number.
declare    -r -x OLS_EX_FILE="$OLS_TMP_DIR/EX_CODE.txt"  # Hold the current Exit Code.

trap "Exit 1"                HUP INT PIPE QUIT TERM 
trap 'ols_end' EXIT

ols_wt_excode $EX_OK                    # Assume this script will be successful.
ols_wt_tstno  0                         # Initialize OLS_TMP_DIR/TAP.txt

declare -a SYSIN=('')            # In
declare -a SYSOUT=('')           # Output files

} # ols_begin
# ols_rd_tstno - Read Olaus Test Number from temporary file.

cat >/dev/null <<'/*'

=head1 NAME

B<ols_rd_tstno> - Read Olaus Test No. from a temporary file.

=head1 SYNOPSIS

NUM=$(B<ols_rd_tstno>)

=head1 DESCRIPTION

B<ols_rd_tstno> reads the Olaus Test No., I<NUM> from a temporary files and writes it to standard out.

=head1 EXAMPLE

    NUM=NUM=$(B<ols_rd_tstno>)

=head1 DIAGNOSTICS

ols_clean: cannot remove $file

=head1 ENVIRONMENT

=over 4

=item OLSMKT

A temporary file to remember temporary file names.

=back

=head1 FILES

OLKMKT

clsfile removes temporary files.

=head1 VERSION

Version V00.00.00

=head1 BUGS

=head1 SEE ALSO

mktemp, mktfile

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

   Date      Version   Description
2025-03-08  V00.00.00  Function created by Mark

=cut

/*
function ols_bmp_tstno() {

    # Increment the TAP Test Number by 1

    NUM=$(ols_rd_tstno)                 # Should read  7297 from OLS_TSTFILE
    NUM=$((NUM+1))
    ols_wt_tstno $NUM

} # end ols_bmp_tstno
#====================== Olaus General Symbol Definitions =======================

if [[ -z "$OLS_DEF" ]]; then

    declare    -r -x TRUE=1
    declare    -r -x FALSE=0
    declare    -r -x SUCCESS=0
    declare    -r -x FAIL=1

  # Exit code definitions:
    declare -i -r -x EX_OK=0            # Successful termination
    declare -i -r -x EX_WARNING=4       # Warning
    declare -i -r -x EX_ERROR=8         # Error
    declare -i -r -x EX_SEVERE=12       # Severe error
    declare -i -r -x EX_FATAL=16        # Fatal error
    declare -i -r -x EX_BASE=64         # Base value for error messages
    declare -i -r -x EX_USAGE=64        # Command line usage error
    declare -i -r -x EX_DATAERR=65      # Data format error
    declare -i -r -x EX_NOINPUT=66      # Cannot open input
    declare -i -r -x EX_NOUSER=67       # Addressee unknown
    declare -i -r -x EX_NOHOST=68       # Host name unknown 
    declare -i -r -x EX_UNAVAILABLE=69  # Service unavailable
    declare -i -r -x EX_SOFTWARE=70     # Internal software error
    declare -i -r -x EX_OSERR=71        # System error (e.g., can't fork)
    declare -i -r -x EX_OSFILE=72       # Critical OS file missing
    declare -i -r -x EX_CANTCREAT=73    # Can't create (user) output file
    declare -i -r -x EX_IOERR=74        # Input/output error
    declare -i -r -x EX_TEMPFAIL=75     # Temp failure; user is invited to retry
    declare -i -r -x EX_PROTOCOL=76     # Remote error in protocol
    declare -i -r -x EX_NOPERM=77       # Permission denied
    declare -i -r -x EX_CONFIG=78       # Configuration error
    declare -i -r -x EX_MISSINGFILE=79  # A file is missing
    declare -i -r -x EX_CANTC8TEMP=80   # Can't create temporary file
    declare -i -r -x EX_ASSERTFAIL=81   # Assertion failed
    declare -i -r -x EX_CANTC8LOCK=82   # Can't create lock file.
    declare -i -r -x EX_USERABORT=83    # Aborted by user
    declare -i -r -x EX_TERMINATION=84  # Trapped termination interrupt
    declare -i -r -x EX_TRAPINT=85      # Trapped interrupt
    declare -i -r -x EX_TESTMAXERR=254  # Maximum error count for Olaus Test
    declare -i -r -x EX_TESTBAIL=255    # BAIL_OUT function terminated script
    declare -i    -x EX_CODE=$EX_OK     # Initialize Exit Code to OK

  # ASCII Special Characters:
    declare    -r -x OLS_NUL="\x00"     # Null Character
    declare    -r -x OLS_SOH="\x01"     # Start of Heading
    declare    -r -x OLS_STX="\x02"     # Start of Text
    declare    -r -x OLS_ETX="\x03"     # End of Text
    declare    -r -x OLS_EOT="\x04"     # End of Transmission
    declare    -r -x OLS_ENQ="\x05"     # Enquire
    declare    -r -x OLS_ACK="\x06"     # Acknowledge
    declare    -r -x OLS_BEL="\x07"     # Bell, Alert
    declare    -r -x OLS_BS="\x08"      # Backspace
    declare    -r -x OLS_HT="\x09"      # Horizontal Tab
    declare    -r -x OLS_LF="\x0a"      # Line Feed
    declare    -r -x OLS_VT="\x0b"      # Vertical Tab
    declare    -r -x OLS_FF="\x0c"      # Form Feed
    declare    -r -x OLS_CR="\x0d"      # Carriage Return
    declare    -r -x OLS_SO="\x0e"      # Shift Out
    declare    -r -x OLS_SI="\x0f"      # Shift In
    declare    -r -x OLS_DLE="\x10"     # Data Link Excape
    declare    -r -x OLS_DC1="\x11"     # Device Control One (XON)
    declare    -r -x OLS_DC2="\x12"     # Divice Control Two
    declare    -r -x OLS_DC3="\x13"     # Device Control There (XOFF)
    declare    -r -x OLS_DC4="\x14"     # Device Control Four
    declare    -r -x OLS_NAK="\x15"     # Negative Acknowledge
    declare    -r -x OLS_SYN="\x16"     # Synchronousw Idle
    declare    -r -x OLS_ETB="\x17"     # End of Transmission Block
    declare    -r -x OLS_CAN="\x18"     # Cancel
    declare    -r -x OLS_EM="\x19"      # End of Medium
    declare    -r -x OLS_SUB="\x1a"     # Substitute
    declare    -r -x OLS_ESC="\x1b"     # Escape
    declare    -r -x OLS_FS="\x1c"      # File Separator
    declare    -r -x OLS_GS="\x1d"      # Group Separator
    declare    -r -x OLS_RS="\x1e"      # Record Separator
    declare    -r -x OLS_US="\x1f"      # Unit Separator
    declare    -r -x OLS_SP=" "         # Blank
    declare    -r -x OLS_DEL="\x7F"     # Delete


  # Test harness definitions:
    declare -i -r -x OLS_TST_INIT=0     # Start with test number zero.
    
  # Switch to load definitions one time.
    declare    -r -x OLS_DEF=$TRUE          # OLSDEF=T ==> ols_def has been loaded.

fi # if [[ -z "$OLS_DEF" ]]
# olsend - Olaus BASH Shell Housekeeping Function at End of Script

cat >/dev/null <<'/*'

=head1 NAME

ols_end - Olaus BASH Shell Housekeeping Function at End of Script

=head1 SYNOPSIS

ols_end

=head1 DESCRIPTION

B<ols_end> removes temporary files created by mktfile.

=head1 EXAMPLE

    TMPDIR=.
    mktfile
    mktfile
    mktfile
    mktfile
    mktfile
    clsfile

results in

    ./tmp.oLQAKu3856
    ./tmp.YYPgYWa576
    ./tmp.bleTsL1664
    ./tmp.cQPswSq872
    ./tmp.JVydYl5792
    ./tmp.IinrNW1440
    /tmp/OLSMKT.SDwX6040

temporary files being removed.

=head1 DIAGNOSTICS

ols_clean: cannot remove $file

=head1 ENVIRONMENT

=over 4

=item OLSMKT

A temporary file to remember temporary file names.

=back

=head1 FILES

OLKMKT

clsfile removes temporary files.

=head1 VERSION

$Revision$

$Id: clsfile.sh 87 2006-09-13 17:06:10Z a0214394 $

$URL: file:///cygdrive/c/svn/olaus/trnk/src/bash/clsfile/clsfile.sh $

=head1 BUGS

=head1 SEE ALSO

mktemp, mktfile

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

2006-09-12 - Function created by nuf ver. 3.0.0

=cut

/*
function ols_end()
{

    trap '' EXIT                       # No need to trap exit here

    exit $EX_CODE                      # exit with exit code we have been tracking

} # end ols_end
# olserr -- Print an Olaus Shell Library Error Message

function ols_err() {
    if [[ -z "$1" ]]
    then
        ols_err 7001 $EX_SOFTWARE "${FUNCNAME}: Augument #1 missing, num"
    else
        local num=$(printf "%4u" "$1"); num=${num// /0}
    fi
    if [[ -z "$2" ]]
    then
        ols_err 7002 $EX_SOFTWARE "${FUNCNAME}: Augument #2 missing, ex_code"
    else
        local ex_code=$2
    fi
    shift 2
    if [[ -z "$1" ]]; then
        ols_err 7003 $EX_SOFTWARE "${FUNCNAME}: Augument #3 missing, msg"
    else
        local msg="$*"
    fi

    case $ex_code in
        ( $EX_OK      ) local sev="I";;
        ( $EX_WARNING ) local sev="W";;
        ( $EX_ERROR   ) local sev="E";;
        ( $EX_SEVERE  ) local sev="S";;
        ( *           ) local sev="F";;
    esac

    printf "%s%s%s%s%s\n" $PGMID $num $sev ' ' "$msg" >&2

    ols_set_excode $ex_code
    if [[ $sev ==  "F" ]]; then ols_end; fi
    
    return $EX_CODE
} # end ols_err

cat >/dev/null <<'=cut'

=head1 NAME

ols_err - write an error message to STDERR, set exit code, exit if fatal.

=head1 SYNOPSIS

ols_err num ex_code msg

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item I<num>

(required) Error message number.

=item I<ex_code>

(required) Exit Code and Severity of message.

=item I<msg>

(required) Error message text. 

=back

=head1 SECURITY

B<ols_err> does not require root access.

=head1 AVAILABILITY

=head1 EXAMPLES

    ols_err 7001 $EX_SOFTWARE "${FUNCNAME}: missing argument 1, num"

=head1 NOTES

=head1 CAVEATS

=head1 DIAGNOSTICS

=head1 ENVIRONMENT

=over 4

=item EX_CODE

Current exit code.

=item PGMID

Program ID, see B<olausbegin>.

=back

=head1 FILES

=head1 STANDARDS

=head1 VERSION

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

Re

$Revision: 162 $

$Id: ols_err.sh 162 2007-03-13 00:19:18Z a0214394 $

2006-09-17 - Function created by nuf ver. 3.0.0

=head1 RESOURCES

=head1 BUGS

=head1 SEE ALSO

B<olausbegin>, B<setexcode>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2013, Mark Jensen.

include(licsense.txt)

=cut

# ols_mktemp - make and remember a unique temporary filename

# Keep track of temporary filenames.
export   OLSMKT=$(mktemp -t OLSMKT.XXXXXXXX)
readonly OLSMKT

cat >/dev/null <<'/*'

=head1 NAME

ols_mktemp - make and remember a unique temporary filename

=head1 SYNOPSIS

B<ols_mktemp> I<template>

=head1 DESCRIPTION

B<ols_mktemp> returns a temporary filename built by mktemp.

The temporary file is built in one of the following directories:

=over 4

=item 1.

$TMPDIR

=item 2.

$TEMP

=item 3.

~/tmp

=item 4.

/tmp

=back

=head1 ARGUMENTS

=over 4

=item I<template>

A filename template with trailing Xs (optional),
for example, "xspy_sed_XXXX".
If no template is specified, a default of
"tmp.XXXXXXXXXX" is used.

=back

=head1 EXAMPLES

=head2 Personal temporary directory

    TMPDIR=~/tmp
    sed_file=$(ols_mktemp sed.XXXX)
    echo $sed_file

results in

    /cygdrive/c/Documents and Settings/a0214394/tmp/sed.4212

=head2 System temporary directory

    TMPDIR=
    tmp_file=$(ols_mktemp)
    echo $tmp_file

results in

    /tmp/tmp.lEpAvh4624

=head2 Working directory

    TMPDIR=.
    tmp_file=$(ols_mktemp)
    echo $tmp_file

results in

    ./tmp.RdyxIl4276

=head1 DIAGNOSTICS

mktfile: cannot make temporary file, directory/template

=head1 ENVIRONMENT

=over 4

=item _OLSMKT

Array to remember temporary file names.

=item TEMP

Variable pointing to desired temporary directory.

=item TMPDIR

Variable pointing to desired temporary directory.

=back

=head1 FILES

mktfile creates temporary files.

=head1 VERSION

$Id: mktfile.sh 87 2006-09-13 17:06:10Z a0214394 $

$URL: file:///cygdrive/c/svn/olaus/trnk/src/bash/mktfile/mktfile.sh $

=head1 BUGS

=over 4

=item Directory Existance

B<ols_mktemp> does not check for the existance
of a directory at $TMPDIR or $TEMP.

=back

=head1 SEE ALSO

B<mktemp>, B<ols_clean>

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

2006-09-12 - Function created by nuf ver. 3.0.0

=cut

/*
function ols_mktemp()
{
  # Test for argument.
    set +o nounset
    local template
    if [[ "$1" = "" ]]; then template="tmp.XXXXXXXXXX"
    else                     template=$1
    fi

    if [[ $OLSTMPQUEUE[0]!=$OLSSTACK ]]
    then
        list_queue_new OLSTMPQUEUE
    fi

    local tmp_dir
    if [[   -n "$TMPDIR"   ]]; then tmp_dir="$TMPDIR"
    elif [[ -n "$TEMP"     ]]; then tmp_dir="$TEMP"
    elif [[ -d "$HOME/tmp" ]]; then tmp_dir="$HOME/tmp"
    else                            tmp_dir="/tmp"
    fi
    set -o nounset

  # Build temporary file, error if it cannot be made.
    local tmp_file
    tmp_file=$(mktemp -q "${tmp_dir}/${template}") \
        || error_exit \
          "mktfile: cannot make temporary file, ${tmp_dir}/${template}"
    list_queue_push OLSTMPQUEUE tmp_file

    echo $tmp_file

    return $EX_OK
} # end ols_mktemp
# ols_bmp_tstno - Bump, write & return the Olaus Test No.

cat >/dev/null <<'/*'

=head1 NAME

B<ols_bmp_tstno> - Bump, write & return the Olaus Test No.

=head1 SYNOPSIS

NUM=$(B<ols_bmp_tstno>)

=head1 DESCRIPTION

B<ols_bmp_tstno> reads the Olaus Test No., I<NUM> from a temporary files,
increments it by 1, and writes it to standard out.

=head1 EXAMPLE

    NUM=$(B<ols_bmp_tstno>)

=head1 DIAGNOSTICS

ols_clean: cannot remove $file

=head1 ENVIRONMENT

=over 4

=item OLSMKT

A temporary file to remember temporary file names.

=back

=head1 FILES

OLKMKT

clsfile removes temporary files.

=head1 VERSION

Version V00.00.00

=head1 BUGS

=head1 SEE ALSO

mktemp, mktfile

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

   Date      Version   Description
2025-03-08  V00.00.00  Function created by Mark

=cut

/*
function ols_bmp_tstno() {

    # Synopsis: ols_bmp_tstno NUM

    trap '' EXIT                       # No need to trap exit here

    exit $EX_CODE                      # exit with exit code we have been tracking

} # end ols_bmp_tstno
# ols_rd_excode - Read Olaus Exit Code to temporary file.

cat >/dev/null <<'/*'

=head1 NAME

B<ols_rd_excode> - Write Olaus Exit Code to temporary file.

=head1 SYNOPSIS

B<ols_rd_excode> I<EX_CODE>

=head1 DESCRIPTION

B<ols_rd_excode> writes the Olaus Exit Code, I<EX_CODE> to a temporary file with the name $OLS_EX_FILE.

The Olaus Bash Library uses temporary files to simulate global variables.

=head1 EXAMPLE

    EX_CODE=$(ols_rd_excode)

=head1 NOTES & CAVEATS

=head1 DIAGNOSTICS

=head2 OLS7001F

ols_rd_excode: Missing Argument #1, num

=head3 Severity: Fatal Error, EX_CODE=16

=head3 Explanation:

B<ols_rd_excode> was called without an exit code.

=head3 Programmer Response:

Isolate call to B<ols_rd_excode> and supply the intended exit code.

=head2 OLS7002F

B<ols_rd_excode:> Exit Code must be between 0 and 255.

=head3 Severity: Fatal Error, EX_CODE=16

=head3 Explanation:

B<ols_rd_excode> was called with an exit code, num, outside the permissibable range, 0 E<le> num E<le> 255.

=head3 Programmer Response:

Isolate call to B<ols_rd_excode> and supply the proper exit code.

=head1 ENVIRONMENT

=over 4

=item OLS_LIB

B<ols_rd_excode> uses OLS_LIB to know where the Olaus Bash Library is located.

=item OLS_EX_FILE

B<ols_rd_excode> uses OLS_EX_FILE to know where to write the exit code.

=item EX_SOFTWARE

B<ols_rd_excode> uses EX_SOFTWARE to signal a fatal error if required.

=back

=head1 FILES

B<ols_rd_excode> writes the exit code to the temporary file stored in OLS_EX_FILE.

=head1 VERSION

Version V00.00.01

=head1 BUGS

=head1 SEE ALSO

B<ols_rd_excode>, B<ols_set_excode>

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

   Date      Version   Description
2025-03-10  V00.00.00  Function created by Mark
2025-03-10  V00.00.01  Initial Release by Mark

=cut

/*

function ols_rd_excode() {

    # Synopsis: N=$(ols_rd_excode)

    EX_CODE=$(cat $OLS_EX_FILE)               # EX_CODE as a trailing NEWLINE
    printf "%s" $EX_CODE                      # Strip the NEWLINE

} # end ols_wt_tstno
# ols_bmp_tstno - Bump, write & return the Olaus Test No.

cat >/dev/null <<'/*'

=head1 NAME

B<ols_bmp_tstno> - Bump, write & return the Olaus Test No.

=head1 SYNOPSIS

NUM=$(B<ols_bmp_tstno>)

=head1 DESCRIPTION

B<ols_bmp_tstno> reads the Olaus Test No., I<NUM> from a temporary files,
increments it by 1, and writes it to standard out.

=head1 EXAMPLE

    NUM=$(B<ols_bmp_tstno>)

=head1 DIAGNOSTICS

ols_clean: cannot remove $file

=head1 ENVIRONMENT

=over 4

=item OLSMKT

A temporary file to remember temporary file names.

=back

=head1 FILES

OLKMKT

clsfile removes temporary files.

=head1 VERSION

Version V00.00.00

=head1 BUGS

=head1 SEE ALSO

mktemp, mktfile

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

   Date      Version   Description
2025-03-08  V00.00.00  Function created by Mark

=cut

/*
function ols_bmp_tstno() {

    # Synopsis: ols_bmp_tstno NUM

    trap '' EXIT                       # No need to trap exit here

    exit $EX_CODE                      # exit with exit code we have been tracking

} # end ols_bmp_tstno
# ols_rd_tstno - Read Olaus Test Number from temporary file.

cat >/dev/null <<'/*'

=head1 NAME

B<ols_rd_tstno> - Read Olaus Test No. from a temporary file.

=head1 SYNOPSIS

NUM=$(B<ols_rd_tstno>)

=head1 DESCRIPTION

B<ols_rd_tstno> reads the Olaus Test No., I<NUM> from a temporary files and writes it to standard out.

=head1 EXAMPLE

    NUM=NUM=$(B<ols_rd_tstno>)

=head1 DIAGNOSTICS

ols_clean: cannot remove $file

=head1 ENVIRONMENT

=over 4

=item OLSMKT

A temporary file to remember temporary file names.

=back

=head1 FILES

OLKMKT

clsfile removes temporary files.

=head1 VERSION

Version V00.00.00

=head1 BUGS

=head1 SEE ALSO

mktemp, mktfile

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

   Date      Version   Description
2025-03-08  V00.00.00  Function created by Mark

=cut

/*
function ols_rd_tstno() {

    # Synopsis: NUM=$(ols_rd_excode)

    N=$(cat $OLS_EX_FILE)               # N as a trailing NEWLINE
    printf "%s" $N                      # Strip the NEWLINE
    
} # end ols_rd_tstno
# Remove Temporary Files

# Dummy Function for Now

function ols_rmtemp ()
{

return $EX_OK

 # Remove any temporary files.
    if [[ -n $OLSMKT ]]; then
        while read file; do
            if [[ -e "$file" ]]; then
                rm -f "$file" \
                    || ols_err $EX_ERROR 2004 "ols_clean: cannot remove temporary file, $OLSMKT" >&2
            fi
        done <$OLSMKT
    fi
return

} # ols_rmtemp
# ols_set_excode - Read Olaus Test Number from temporary file.

cat >/dev/null <<'=cut'

=head1 NAME

B<ols_set_excode> - Read Olaus Test No. from a temporary file.

=head1 SYNOPSIS

NUM=$(B<ols_set_excode>)

=head1 DESCRIPTION

B<ols_set_excode> reads the Olaus Test No., I<NUM> from a temporary files and writes it to standard out.

=head1 EXAMPLE

    NUM=NUM=$(B<ols_set_excode>)

=head1 DIAGNOSTICS

ols_clean: cannot remove $file

=head1 ENVIRONMENT

=over 4

=item OLSMKT

A temporary file to remember temporary file names.

=back

=head1 FILES

OLKMKT

clsfile removes temporary files.

=head1 VERSION

Version V00.00.01

=head1 BUGS

=head1 SEE ALSO

mktemp, mktfile

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

   Date      Version   Description
2025-03-08  V00.00.00  Function created by Mark
2025-03-10  V00.00.01  Replace dummy code

=cut

function ols_set_excode()
{
    if [[ -z "$1" ]]; then
        ols_err 7001 $EX_SOFTWARE "ols_set_excode: missing argument 1, ex_code"
    else
        local -i ex_code=$1
    fi

    EX_CODE=$(ols_rd_excode)

    if (( EX_CODE < ex_code )); then
        ols_wt_excode $ex_code
    fi
    
    return $EX_OK

} # end ols_set_excode
# ols_tap_assertion - Write TAP assertion results to stdout.

# Synopsis: ols_tap_assertion test_result test_name [diagnostic_message]

function ols_tap_print_assertion() {

    # Check for missing arguments.
    if [[ $# -eq 0 ]]
    then
        olserr 7000 $EX_SOFTWARE "${FUNCNAME}: Arguments 1-3 missing, test_result, test_name and diagnostic_message"
    fi
    if [[ $# -eq 1 ]]
    then
        olserr 7000 $EX_SOFTWARE "${FUNCNAME}: Arguments 2-3 missing, test_name and diagnostic_message"
    fi

    test_result="$1"
    test_name="$2"

    # Process test results

    if [[ test_result ]]; then
        tap_result="ok"
    else
        tap_result="not ok"
    fi

    # Process diagnostic message if present.
    if [[ $# -ge 3 ]]                            # Diagnostic message argument is optional.
    then
        shift 3
        local diagnostic_message=": $*"          # Add the colon between the test number
    else                                         # and diagnostic message here.
        local diagnostic_message=""
    fi

    tst_no=$(ols_bmp_tstno)             # Increment TAP test number.

    printf "%s\n" "$tap_result - $tst_no $test_name$diagnostic_message"
 
    return $EX_OK

} # end ols_tap_print_assertion
# ols_tap_test_plan - Write TAP test_plan results to stdout.

# Synopsis: ols_tap_test_plan no_tests

function ols_tap_print_test_plan() {

    # Check for missing arguments.
    if [[ $# -eq 0 ]]; then
        ols_err 7000 $EX_SOFTWARE "${FUNCNAME}: Arguments 1 missing, no_tests"
    fi
    
    no_tests="$1"

    if ! [[no_tests =~ ^[[:digits:]]+$ ]]; then
        ols_err 7000 $EX_SOFTWARE "${FUNCNAME}: Argument no_test must be whold number."
    fi

    if (( no_tests <= 0 )); then
        ols_err 7000 $EX_SOFTWARE "${FUNCNAME}: Argument no_test must be greater then 0."
    fi

    printf "%s\n" "1..$no_tests"
 
    return $EX_OK

} # end ols_tap_print_test_plan
# ols_wt_tstno - Write Olaus Test Number to temporary file.

cat >/dev/null <<'/*'

=head1 NAME

B<ols_wt_excode> - Write Olaus Exit Code to temporary file.

=head1 SYNOPSIS

B<ols_wt_excode> I<EX_CODE>

=head1 DESCRIPTION

B<ols_wt_excode> writes the Olaus Exit Code, I<EX_CODE> to a temporary file with the name $OLS_EX_FILE.

The Olaus Bash Library uses temporary files to simulate global variables.

=head1 EXAMPLE

    ols_wt_excode $OLS_EXCODE

=head1 NOTES & CAVEATS

B<Note:> Due to the behavior of the C<printf> command,
EX_CODE should not have a leading zero.
If it does,
the value will be converted to octal, I<e.g.>,
'064' will be converted to ' 52'.

=head1 DIAGNOSTICS

=head2 OLS7001F

ols_wt_excode: Missing Argument #1, num

=head3 Severity: Fatal Error, EX_CODE=16

=head3 Explanation:

B<ols_wt_excode> was called without an exit code.

=head3 Programmer Response:

Isolate call to B<ols_wt_excode> and supply the intended exit code.

=head2 OLS7002F

B<ols_wt_excode:> Exit Code must be between 0 and 255.

=head3 Severity: Fatal Error, EX_CODE=16

=head3 Explanation:

B<ols_wt_excode> was called with an exit code, num, outside the permissibable range, 0 E<le> num E<le> 255.

=head3 Programmer Response:

Isolate call to B<ols_wt_excode> and supply the proper exit code.

=head1 ENVIRONMENT

=over 4

=item OLS_LIB

B<ols_wt_excode> uses OLS_LIB to know where the Olaus Bash Library is located.

=item OLS_EX_FILE

B<ols_wt_excode> uses OLS_EX_FILE to know where to write the exit code.

=item EX_SOFTWARE

B<ols_wt_excode> uses EX_SOFTWARE to signal a fatal error if required.

=back

=head1 FILES

B<ols_wt_excode> writes the exit code to the temporary file stored in OLS_EX_FILE.

=head1 VERSION

Version V00.00.01

=head1 BUGS

=head1 SEE ALSO

B<ols_rd_excode>, B<ols_set_excode>

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

   Date      Version   Description
2025-03-10  V00.00.00  Function created by Mark
2025-03-10  V00.00.01  Initial Release by Mark

=cut

/*

function ols_wt_excode() {

    local num

    if [[ -z "$1" ]]
    then
        ols_err 7001 $EX_SOFTWARE "${FUNCNAME}: Missing argument #1, num"
    else
        num=$(printf "%3u" "$1");
    fi

    if (( $num < 0 || 255 < $num )); then
        ols_err 7002 $EX_SOFTWARE "${FUNCNAME}: Exit Code must be between 0 and 255."
    fi

    printf "%3d\n" $num >$OLS_EX_FILE

} # end ols_wt_tstno
# ols_wt_tstno - Write Olaus Test Number to temporary file.

cat >/dev/null <<'/*'

=head1 NAME

B<ols_wt_tstno> - Write Olaus Test No. to temporary file.

=head1 SYNOPSIS

B<ols_wt_tstno> I<NUM>

=head1 DESCRIPTION

B<ols_wt_tstno> writes the Olaus Test No., I<NUM> to a temporary files.

=head1 EXAMPLE

    ols_wt_tstno $OLSTSTNO

=head1 DIAGNOSTICS

OLS7001F ols_wt_tstno: missing argument 1, num 


=head1 ENVIRONMENT

=over 4

=item OLSMKT

A temporary file to remember temporary file names.

=back

=head1 FILES

OLKMKT

clsfile removes temporary files.

=head1 VERSION

Version V00.00.00

=head1 BUGS

=head1 SEE ALSO

mktemp, mktfile

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

   Date      Version   Description
2025-03-08  V00.00.00  Function created by Mark

=cut

/*

function ols_wt_tstno() {

    if [[ -z "$1" ]]
    then
        ols_err 7001 $EX_SOFTWARE "${FUNCNAME}: missing argument 1, num"
    else
        local num=$(printf "%4u" "$1"); num=${num// /0}
    fi
    
    printf "%u\n" $num >$OLS_TSTFILE

} # end ols_wt_tstno
# plan - declare number of tests you are going to run

function test_plan() {

    if [[ -z "$1" ]]; then
        ols_err 7001 $EX_SOFTWARE "${FUNCNAME}: Argument #1 missing, tst_no"
        return $EX_SOFTWARE
    else
        local -i tst_no=$1
    fi

    if ! [[ $tst_no =~ ^[[:digit:]]+$ ]]; then
        ols_err 7006 $EX_SOFTWARE "${FUNCNAME}: Test number, tst_no, must be a natural number."
    fi

    if (( $tst_no <= 0 )); then
        ols_err 7002 $EX_SOFTWARE "${FUNCNAME}: Test number, tst_no, must be greater than 0."
    fi

    ols_wt_tstno $OLS_TST_INIT

    if [[ -z "$2" ]]; then
        printf "1..$tst_no\n" >&1           # Send the TAP test plan to STDOUT.
    # else
    #    printf "1..$tst_no # $2\n" >&1      # Perl prove does not support a reason on the test plan record.
    fi

    return $EX_OK

} # end test_plan

echo at begin
ols_begin

echo at test_plan
test_plan 4

if [[ -z "$DATE" ]]; then
    printf '%s\n' 'not ok 1 - DATE undefined after source command.'
    RC=$EX_ERROR
else
    printf '%s\n' 'ok 1 - DATE, $DATE, is defined.'
fi

if [[ -z "$YEAR" ]]; then
    printf '%s\n' 'not ok 2 - YEAR undefined after source command.'
    RC=$EX_ERROR
else
    printf '%s\n' 'ok 2 - YEAR, $YEAR, is defined.'
fi

if [[ -z "$OLS_TSTFILE" ]]; then
    printf '%s\n' 'not ok 3 - OLS_TSTFILE undefined after source command.'
    RC=$EX_ERROR
else
    printf '%s\n' 'ok 3 - OLS_TSTFILE, $OLS_TSTFILE, is defined.'
fi

if [[ -z "$OLS_EX_FILE" ]]; then
    printf '%s\n' 'not ok 4 - OLS_EX_FILE undefined after source command.'
    RC=$EX_ERROR
else
    printf '%s\n' 'ok 4 - OLS_EX_FILE, $OLS_EX_FILE, is defined.'
fi
ols_end
